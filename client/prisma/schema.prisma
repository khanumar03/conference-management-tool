// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Roles {
  Chair
  Manager
  Reviewer
  Author
}

enum SubmissionStatus {
  Accepted
  Rejected
  Pending
}

model User {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String          @unique
  password      String      @db.String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  roles         RolesConnector[]
  accounts      Account[]
  sessions      Session[]
}

model Conference {
  id     String           @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  roles  RolesConnector[]
  domain Domain[]
}

model RolesConnector {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  userId       String     @db.ObjectId
  conferenceId String     @db.ObjectId
  user         User       @relation(fields: [userId], references: [id])
  conference   Conference @relation(fields: [conferenceId], references: [id])
  role         Roles      @default(Author)
}

model Domain {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  conferenceId String       @db.ObjectId
  conference   Conference   @relation(fields: [conferenceId], references: [id])
  submission   Submission[]
}

model Submission {
  id     String           @id @default(auto()) @map("_id") @db.ObjectId
  Status SubmissionStatus @default(Pending)

  domainId String @db.ObjectId
  domain   Domain @relation(fields: [domainId], references: [id])

  fileMeataData FileMetaData[]
}

model FileMetaData {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  filename     String
  ext          String
  submissionId String     @db.ObjectId
  submission   Submission @relation(fields: [submissionId], references: [id])
}

// Auth

model Account {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String    @db.ObjectId
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
